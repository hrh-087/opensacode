"""
Django settings for opensa project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from __future__ import absolute_import
from django.urls import reverse_lazy
from pathlib import Path
import pymysql
import configparser

pymysql.install_as_MySQLdb()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-l2-j@1b1i6td1-m4h&as4)x0#xvvn#j-2526%+f^*1sl)&8knm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# 用户认证模块
AUTH_USER_MODEL = 'users.UserProfile'
TOKEN_TIMEOUT = 120

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django_celery_results',
    # 'django_celery_beat',
    'users',
    'asset',
    'audit',
    'jobs',
    'rest_framework',
    'rest_framework.authtoken'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'opensa.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.joinpath("templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
    # jinja2 模板引擎
    # {
    #     'BACKEND': 'django.template.backends.jinja2.Jinja2',  # jinja2模板引擎
    #     'DIRS': [Path(BASE_DIR).joinpath("templates")],  # 配置模板文件夹的路径
    #     'APP_DIRS': True,
    #     'OPTIONS': {
    #         'context_processors': [
    #             'django.template.context_processors.debug',
    #             'django.template.context_processors.request',
    #             'django.contrib.auth.context_processors.auth',
    #             'django.contrib.messages.context_processors.messages',
    #         ],
    #         "environment": 'utils.jinja2.jinja2_env',  # jinja2环境
    #     },
    # },
]

WSGI_APPLICATION = 'opensa.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
# 配置
config = configparser.ConfigParser()
config.read(Path(BASE_DIR).joinpath("config.conf"))
DB_HOST = config.get('db', 'host')
DB_PORT = config.getint('db', 'port')
DB_USER = config.get('db', 'user')
DB_PASSWORD = config.get('db', 'password')
DB_DATABASE = config.get('db', 'database')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DB_DATABASE,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
        'CONN_MAX_AGE': 60,
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# 用于指定用户在成功登录后应重定向到的页面。
# LOGIN_REDIRECT_URL = reverse_lazy('index')
# 用于指定未登录用户访问需要登录的页面时应该重定向到的登录页面
# LOGIN_URL = reverse_lazy('users:login')

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_DIR = BASE_DIR.joinpath("static")

STATICFILES_DIRS = (
    BASE_DIR.joinpath("static"),
)

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# redis
redis_ip = config.get('redis', 'redis_ip')
redis_port = config.getint('redis', 'redis_port')
redis_pwd = config.get('redis', 'redis_pwd')
redis_db = config.get('redis', 'redis_db')

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://{}:{}".format(redis_ip, redis_port),
        "OPTIONS": {
            'DB': '{}'.format(redis_db),
            'PASSWORD': '{}'.format(redis_pwd),
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100}
        }
    }
}

LOG_DIR = BASE_DIR.joinpath("logs")

# REST 配置
REST_FRAMEWORK = {
    # 配置认证方式的选项
    "DEFAULT_AUTHENTICATION_CLASSES": (
        # 'opensa.authentication.CustomAuthentication',  # 自定义用户认证
        'rest_framework.authentication.BasicAuthentication',  # 基础认证
        'rest_framework.authentication.SessionAuthentication',  # session认证
        'rest_framework.authentication.TokenAuthentication',  # Token认证
    ),
    # 权限判断
    "DEFAULT_PERMISSION_CLASSES": (
        # 'rest_framework.permissions.IsAuthenticated',
        'opensa.permissions.CustomPermissions',  # 自定义权限认证
        # 大部分企业内部站点，不允许其他人随意访问，都会默认全局设置 IsAuthenticated，针对login页面，可以再登录视图类中设置permissions_classes= []
    ),
    # 限流配置
    # "DEFAULT_THROTTLE_CLASSES": (
    #     'rest_framework.throttling.AnonRateThrottle',  # 未认证用户
    #     'rest_framework.throttling.UserRateThrottle',  # 已认证用户
    #
    # ),
    # "DEFAULT_THROTTLE_RATES": {
    #     'anon': '2/day',  # 针对游客的访问频率进行限制，实际上，drf只是识别首字母，但是为了提高代码的可维护性，建议写完整单词
    #     'user': '5000/day',  # 针对会员访问频率进行限制
    #
    # },
    # "DEFAULT_FILTER_BACKENDS": [
    #     'django_filters.rest_framework.DjangoFilterBackend',  # 排序
    #     'rest_framework.filters.OrderingFilter',  # 排序
    # ],
    # 全局分页配置
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',  # 偏移量分页器
    # 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # 页码分页器
    # 'PAGE_SIZE': 5,

    # 接口文档生成
    # 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema'
    # 自定义的异常处理
    "EXCEPTION_HANDLER": "opensa.exception.CustomExceptionHandler",
}